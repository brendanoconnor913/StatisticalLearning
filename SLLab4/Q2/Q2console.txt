> load("~/R/Smarket.rda")
> View(Smarket)
> glm.fit = glm(default~income+balance, Default, family="binomial")
> detach(cleanDeafult)
> attach(Default)
> glm.probs = predict(glm.fit, type="response")
> glm.pred = ifelse(glm.probs > 0.5, "yes", "no")
> table(glm.pred, Default$default)
        
glm.pred   No  Yes
     no  9629  225
     yes   38  108
> glm.fit1 = glm(default~income+balance, Defaul, family="binomial")
Error in is.data.frame(data) : object 'Defaul' not found
> glm.fit1 = glm(default~income+balance, Default, family="binomial")
> glm.fit1 = glm(default~income+balance, Default, family="binomial", subset=train1)
> glm.probs1 = predict(glm.fit1, type="response", newdata=Default[!train1,])
Error in family(object)$linkinv(pred) : 
  Argument eta must be a nonempty numeric vector
> glm.probs1 = predict(glm.fit1, type="response")
> is.numeric(balance)
[1] TRUE
> is.numeric(income)
[1] TRUE
> is.numeric(default)
[1] FALSE
> glm.probs1 = predict(glm.fit1, type="response", newdata=Default[!train1])
> glm.pred1 = ifelse(glm.probs1 > .5, "Up", "Down")
> t = table(glm.pred1, Default[!train1]$default)
Error in table(glm.pred1, Default[!train1]$default) : 
  all arguments must have the same length
> t = table(glm.pred1, Default[!train1,]$default)
Error in table(glm.pred1, Default[!train1, ]$default) : 
  all arguments must have the same length
> len(glm.pred1)
Error in len(glm.pred1) : could not find function "len"
> length(glm.pred1)
[1] 10000
> length(Default[!train1])
[1] 0
> length(Default[!train1,])
[1] 4
> length(train1)
[1] 5000
> length(Default[-train1,])
[1] 4
> Default[!train1,]
[1] default student balance income 
<0 rows> (or 0-length row.names)
> length(Default[train1,])
[1] 4
> length(Default)
[1] 4
> dim(Default)
[1] 10000     4
> dim(Default[train1,])
[1] 5000    4
> dim(Default[!train1,])
[1] 0 4
> dim(Default[!train1])
[1] 10000     0
> dim(Default[-train1])
[1] 10000     3
> dim(Default[-train1,])
[1] 5000    4
> glm.probs1 = predict(glm.fit1, type="response", newdata=Default[-train1,])
> glm.pred1 = ifelse(glm.probs1 > .5, "Up", "Down")
> t = table(glm.pred1, Default[!train1]$default)
Error in table(glm.pred1, Default[!train1]$default) : 
  all arguments must have the same length
> t = table(glm.pred1, Default[-train1,]$default)
> t
         
glm.pred1   No  Yes
     Down 4813  123
     Up     16   48
> t[1,1] + t[2,1]
[1] 4829
> t[1,2] + t[2,1]
[1] 139
> missclassified = t[1,2] + t[2,1]
> sum(t)
[1] 5000
> validationerror = missclassified / sum(t)
> validationerror
[1] 0.0278
> set.seed(1)
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1}/2])
Error: unexpected '}' in:
"validationerror = function(data) {
    train = sample(dim(data)[1], dim(data)[1}"
>     glm.fit = glm(data$default~data$income+data$balance, data, family="binomial")
Error in as.data.frame.default(data, optional = TRUE) : 
  cannot coerce class ""function"" to a data.frame
> }
Error: unexpected '}' in "}"
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1}/2])
Error: unexpected '}' in:
"validationerror = function(data) {
    train = sample(dim(data)[1], dim(data)[1}"
>     glm.fit = glm(data$default~data$income+data$balance, data, family="binomial", subset=train)
Error in as.data.frame.default(data, optional = TRUE) : 
  cannot coerce class ""function"" to a data.frame
>     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
Error in predict.lm(object, newdata, se.fit, scale = 1, type = ifelse(type ==  : 
  object 'train' not found
>     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
Error in ifelse(fit.prob > 0.5, "Up", "Down") : 
  object 'fit.prob' not found
>     t = table(glm.pred, data[-train,]$default)
Error in table(glm.pred, data[-train, ]$default) : 
  object 'train' not found
>     missclassified = t[1,2] + t[2,1]
>     return missclassified / sum(t)
Error: unexpected symbol in "    return missclassified"
> }
Error: unexpected '}' in "}"
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1}/2])
Error: unexpected '}' in:
"validationerror = function(data) {
    train = sample(dim(data)[1], dim(data)[1}"
>     glm.fit = glm(data$default~data$income+data$balance, data, family="binomial", subset=train)
Error in as.data.frame.default(data, optional = TRUE) : 
  cannot coerce class ""function"" to a data.frame
>     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
Error in predict.lm(object, newdata, se.fit, scale = 1, type = ifelse(type ==  : 
  object 'train' not found
>     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
Error in ifelse(fit.prob > 0.5, "Up", "Down") : 
  object 'fit.prob' not found
>     t = table(glm.pred, data[-train,]$default)
Error in table(glm.pred, data[-train, ]$default) : 
  object 'train' not found
>     missclassified = t[1,2] + t[2,1]
>     return (missclassified / sum(t))
Error: no function to return from, jumping to top level
> }
Error: unexpected '}' in "}"
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1]/2])
Error: unexpected ']' in:
"validationerror = function(data) {
    train = sample(dim(data)[1], dim(data)[1]/2]"
>     glm.fit = glm(data$default~data$income+data$balance, data, family="binomial", subset=train)
Error in as.data.frame.default(data, optional = TRUE) : 
  cannot coerce class ""function"" to a data.frame
>     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
Error in predict.lm(object, newdata, se.fit, scale = 1, type = ifelse(type ==  : 
  object 'train' not found
>     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
Error in ifelse(fit.prob > 0.5, "Up", "Down") : 
  object 'fit.prob' not found
>     t = table(glm.pred, data[-train,]$default)
Error in table(glm.pred, data[-train, ]$default) : 
  object 'train' not found
>     missclassified = t[1,2] + t[2,1]
>     return (missclassified / sum(t))
Error: no function to return from, jumping to top level
> }
Error: unexpected '}' in "}"
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1]/2)
+     glm.fit = glm(data$default~data$income+data$balance, data, family="binomial", subset=train)
+     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
+     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
+     t = table(glm.pred, data[-train,]$default)
+     missclassified = t[1,2] + t[2,1]
+     return (missclassified / sum(t))
+ }
> validationerror(Default)
 Show Traceback
 
 Rerun with Debug
 Error in table(glm.pred, data[-train, ]$default) : 
  all arguments must have the same length In addition: Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
> validationerror(Default)
Error in table(glm.pred, data[-train, ]$default) : 
  all arguments must have the same length
In addition: Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
Called from: table(glm.pred, data[-train, ]$default)
Browse[1]> Q
> dim(Default)
[1] 10000     4
> dim(Default)[1]
[1] 10000
> dim(Default)[1]/2
[1] 5000
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1]/2)
+     glm.fit = glm(data$default~data$income+data$balance, data, family="binomial", subset=train)
+     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
+     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
+     t = table(glm.pred, data[-train,]$default)
+     missclassified = t[1,2] + t[2,1]
+     return (missclassified / sum(t))
+ }
> validationerror(Default)
 Show Traceback
 
 Rerun with Debug
 Error in table(glm.pred, data[-train, ]$default) : 
  all arguments must have the same length In addition: Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
> validationerror(Default)
Error in table(glm.pred, data[-train, ]$default) : 
  all arguments must have the same length
In addition: Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
Called from: table(glm.pred, data[-train, ]$default)
Browse[1]> n
> train = sample(dim(Default)[1], dim(Default)[1]/2)
> data = Default
> train = sample(dim(data)[1], dim(data)[1]/2)
> glm.fit = glm(data$default~data$income+data$balance, data, family="binomial", subset=train)
> fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
> train
   [1]  2011  1140  2717  7851  6378  4694  8261  4929  7746  7032   900
  [12]  4808   847  1718  3313   723  9951  1329  5035  2075  9925  6417
  [23]  5105  3221   386   380  5962  6608  1199  4026  1277  2530  8158
  [34]  7729  8350  7303  8361  5748  8743  5692   309  9246  2147  3362
  [45]  5437  7383  3711  3997  5246  2969  3077  7495  2637  4290  8038
  [56]  9397   326  3428  3670  1953  6339  7294  3395  5642  5269  5819
  [67]   910  5281  7712  5223  4861    50  1219  5629  7915  7427  1422
  [78]   426   113  4041  6132  8433  3043  1244  9020  7842  4004   144
  [89]  4718  2790  7805  8629  3181  8335  6430  2758  3479  1174  8274
 [100]    31  1696  7948  5932  3643  5256  5885  8028  3365  7202   865
 [111]  4318  6703  9987    35  6764  7498  3706  9737  2908   514   542
 [122]  8145  3229  2128   347  9323  8130  3590   412  2959  7106  7041
 [133]  2916  8465  7678  3469  6910  6504  2049  2966  8767  8540  9003
 [144]  7676  4246  5557  1050  3087  6777  9857  4964  6800  9252  2471
 [155]  2645  3698  1001  8033  1823  2424  5907   854  9064  4064  4828
 [166]  9013  6487  9400  7293   445  5158  1523  9894  3295   484  7608
 [177]  4046  3081  4058  2800  6865  5409  2547  3658  8489  1459  2039
 [188]  6972  6992  5079  6981   203  5408  2846  3668  9935  5275  1488
 [199]  9149  1327  6949  6236  6690  6750  5422  7257  9698  5897  9911
 [210]  2357  8030  1129  2244  3890  2621  4182  3738  3440   739  5491
 [221]  1768  8369  7526  7923  3882  1122  1910  6957  1177  5979  5558
 [232]  5879  3209  6736  4958  7484  2256  4400  5847  1063   241  9154
 [243]  9314   509  6446  6006   200  4444  8011  8353  5164  9921  1052
 [254]  8064  9952    62  7772  6382  3492  5505  8082  6107  6297  5862
 [265]  6363  4956   516   161  4527  5772  5286  1032   324  3608  2281
 [276]  9572   481  8567  7473  2034  6340  4214  8674  8704  1084   870
 [287]  8980  9886  8714    27  8803  3350  1607  5445  6416  6445  8053
 [298]  2942  3881  7237   299  4662  4806  3787  1473  6574  1441  4821
 [309]  2861  6001  9452  8801  7976  4761  8076  1660  9554  4992  8443
 [320]  7869  1447  9118  8219  3363  5997  1065   181  7839  6967  7416
 [331]  6152  3464  9838  2162  7525  7929  2947    81  7532  1889   964
 [342]  1203  6289  8290  3480  9124  2555  8065  8838  7325  2591  6851
 [353]  6287  4364  9142  9685  6187  3834  9686  2363  9441   156  1264
 [364]   131  4962  1239  8754  8587  6955  8367  9748  2786  4077  4586
 [375]  7991  7335  8534  3049  6522  5836  9325  8052  1015  4022  5800
 [386]  5789  2483  2599   312  4760  1153   874  3271   850  5529  8393
 [397]  8378  3874  1282  3682  1457  3992  5369    96  3703  1127  8267
 [408]  6022  8108   810  7777  8478  6706  7846  1144  4253  5059  9565
 [419]  5034  2520  7861  7311  9775  4852  6439  6948  4305  4223  7911
 [430]  9577  9049  5385  2484  7892  9243  2418  1967  4560  4877  3425
 [441]  8513  5838  8360  4356  9542  9337  6590  1580  3191  3830   469
 [452]  8173  4841  9245  3542  7033  5728  7590  8430  3427  2131  6607
 [463]  6595  5950  3358  4937  9849  7366  5992  8968  6278  7403  2204
 [474]  8066  1810  7272  5366  2919  6671  2774  3300   508  8060  1249
 [485]  1630  3612  2937  2474  3903  3850   432  3443  9899  5210  1617
 [496]  4188  2293  8278  3769  3802  1292  8041  3776  3662  7443   405
 [507]  1166  4609  1513  6456  2109   722  2508  2805  2515    19  2888
 [518]  5434  7178  7669   806  5006  8317  4543  8853  5955  5353  6495
 [529]  5401  2789  5788  6260  3279  1303  5711  5166   829  8969  7037
 [540]   904  4874   456  8834  8998   671  3448  6150  2137  4623  5874
 [551]  9538  4938  3762  7894   142  1359  9144  3294  9016  2816  1254
 [562]  5867  3017  9164  2372  4805  3369   422  7455  5326  5089  3689
 [573]   157  7739  7060  1569  8059   429  7575  2469  6160  3323  6633
 [584]  6537  5681  9822  7227   531  7105   344  1378  2702  2472  7175
 [595]  2335  1536  7843   635   294  7380  2521  4865  8786   201  8610
 [606]  3672  3053  9757  4999  5904  1193  7975  8451  6079  4338  6133
 [617]  8819  5698  4198  1714  3258  5085  4670  7756  8581  9100  1283
 [628]   433  7184  3128  9977  2907   110  4727  9578  2754  4438  4316
 [639]  2770  6367  5177  8751  1751   489  2826  1076  4177  9743  2302
 [650]  5111  4591  5142  2903  9326  7282  9334  9488  3665   373  2276
 [661]  4106  7107  1775  4768  4120  6976  3289  7409  3554  4118  9071
 [672]  6859  5452  3273  3686  2880  9499  3583  4395  2013   827  4649
 [683]  4642   611  3197  9514  6673  5407  1627  5595  2240  2304  2094
 [694]  1385  5633  3824  5825  3058  1708  4723  6801  8156  3639   813
 [705]  9908  1041  3157  7643  4226  9541   994  1305  4829  4328  2982
 [716]  3032  9302  8632  8716  4354  4647  8081  5294  4468  1426  7750
 [727]  6428  1286  2779  9580  5585  5072  3868  3838  8320  4773  2556
 [738]  9360  1611  6941   364  1470  9442  1740  6658  1733  8526  6817
 [749]  4704  4635   297  4471   612  2703  2065  7091  4048  7920  1131
 [760]  5640  8595  3856  7320  8528  5327  2593  6603  2338  8182  8818
 [771]  7833  6466  8944  6545  5317  3744  1816  7520  3259   647  2545
 [782]  5538  7895  6867  6478   985  2970  6958   748  7578  2323   717
 [793]  2091  6379  9584   403  4442  4644  4308  8900  1955  7167  8888
 [804]  5972  9169  5545  4512  3792  9564  3978  2032  6413  8503  2157
 [815]  3461  9779  5671  6341  5740   264  3808  8124  3679  7986  9874
 [826]  6717  8902  3151  7499  4498  7241  6148  6136  4738  5619  7229
 [837]  1302   546  8385  9684  3983  5213  1965  1162  3548   316  4311
 [848]  6320   884  4030  2759  2961  5171  1735  6176  3140   835   336
 [859]  9881  3024  5133  1138  2079  4717  8318   566  5866  1620  1861
 [870]  2100   528  7386  1547  3034  2948  1291  2278  1114  8824  1337
 [881]  6858   862  2416   135  1082  2638  2825  2153  2077  5501  8334
 [892]  6002  8579  5435  8726  6010  4707  1791  4366  9738  4585  1501
 [903]  4300  6656  8995  5230  9519  4254  6606  1734  1638  9222  3442
 [914]  3327   226  7797  2466  9900  9476  7610  9718  6831  7781  8568
 [925]  1530  4751  2045  7834   189  3315  8517   540   740  7647  2318
 [936]  3597  1399  9532  7659  9300  7044  4600  8247  7252  3727  2210
 [947]  6936  6825   123  4129  8046   890   783  2526  1811  4607  2910
 [958]  5430  9336  9023  3840  8211  7728  9350  5156  7233  7863  1079
 [969]  5322  7629  9845  5187  2604  7243  8462  2219  8240    51  8104
 [980]  1706  5413  9283  1432  4098  1805  7757  1946  2972  4124  4851
 [991]  5278  8705  4049  4679  6618  3849  3148  1615   692  6159  5307
[1002]   741  1859  6098  1786  9947   213  6031  1872  7716  8344    89
[1013]  6563  1829  5551  4648  2835  6033  8920  1824  2066  8505  9613
[1024]  9426  5533  1982  6786  1562  2605   836  4110  3798  9673  4093
[1035]  5183  3088  2718  3877  2951  9398  1535  3470  8105   266  2063
[1046]  5262  9702  6684  2105  3969  4115  9797  9330   292  7635  3810
[1057]  2597  8781  8695  8137  7719  9146  4255  2522   896  7509   630
[1068]  7226  8162  7351    12  5652  8295  1686  2126  6757  3835  1844
[1079]  7966  2307  2119   584  9489  7118  2708  9436   685  2967  5315
[1090]  8015  9259  3601  9069  1136  7490  4404  4653  1125  6642  5432
[1101]  6827  6930  9961  4382  4612  1563  2941  9830  8118  6814  5731
[1112]  9366  7356  7847  8072  7452  1276   175  1505  5647  4348  7415
[1123]  9548  7385  1826  4372  2945  5480  4147  8415  4271  3264  2686
[1134]  8416  7168  5599  8049  5687  6842  7140  3446  5087  3693  9754
[1145]   868  6719  5257  8319  6605  1950  4947  9762  1025  8200  8019
[1156]  4692   693  2535  2734  6329  7039  6864  8302  3175  9215  9859
[1167]  4984  4250  9995  6586  4997  1778  8746  9456  2662  1681  1963
[1178]  3106  9167  3215  8730  2516  2519  2027  1934  6058  1856  9171
[1189]  8849  5843  9315  3206  3568  4867  1711  9148  2560  5528  5888
[1200]  2497  4218  3055  3467    13  5018  5989  1568  1961  2448  9137
[1211]  6285  7183  8172  9078  4423  8710  3158  6919  3080  2257  1838
[1222]  4556   776  7412  1996  5308   215  7354  8312  7488  5358  3141
[1233]  6985  3380  9781  3981  3753   794  2831  2285  7188  1024  6597
[1244]  3005  1988  3003  3763  4332   695  4531  1347  3494  4217  2287
[1255]  8719  2568  9834  7681  7360   271  8198  9742  4412  5694   663
[1266]  2151  5000  6203  2298  8148   909  4055   523  8697  3257  7102
[1277]  8381  6502  9422  3526  6803  5618  3297  9982  3438  5522  7030
[1288]  4260  4288  9603  1606  4966  2999   901  5559  3493  7852  7010
[1299]  5117  1671  4803  5635    52  7236  6076  7096  6560  1765  7068
[1310]  5971  4935  8192  3732  1434  8193  2099  2156  5679  3516  8864
[1321]  2509  2944  5845  2735  6723  5368  1154   575  2104  8363  3120
[1332]  2041  4619  1178  2635  2003  9761  4280  7775  8412  5644  5096
[1343]  7866  1380  2282  4462  8404  4415  2215  8964  3613  5691  6117
[1354]  6101  9509  6915  9472  1133  3743  2478  3573  7114  6988  2646
[1365]  1948  7260  7319  3557  6934  7801  4088  2548  2559  4577  7170
[1376]  3551  4335  4050  2299  4571  8048  4159  6721  5580  7279  9715
[1387]  2246  9369  4211  6376  6637  9537  7940  8208  3987  7533  9670
[1398]  1651  8346  9811  3405  5126  5495  9108  6975   800  1101  9692
[1409]  7291  8701  6422  4249  5052  2488  9412  3082  7515  1438  8475
[1420]  4983  4736  8383  7375  3166   677  3144  6062  2447  4427  5722
[1431]  1917  7806  6490  5513   115  5300  6920  6688  7301  9460  2938
[1442]  8923  1698   666  7497  6412  5023  4374  5797  4402  7155  3466
[1453]   936  2622   939  8023  7969  2004  3572  2512  9273  5597  7666
[1464]  3019  8347   730  5770  1700  9550  3002   146   352  3901  4000
[1475]  3569  4945  8291  9244   687  1439   582  6409  6111  5260  1748
[1486]  3401  4067  4932   750  3959  2130  8963  8123  1637  7026  1062
[1497]  7607  8181  5482  8929  4413   604  7998  1737  2163  9764  9236
[1508]  1596  7228  1006  5625  2396  9851  5760   632    74  8903  6617
[1519]  4614   645  2690  4142  6983  2036   251  3495  5293  3183  5919
[1530]  5012  7631  4910  9157  8938  2672  2975  4096  9847  9184  1873
[1541]  2595  7807   536   112  2765  4291  7695  4559  4456  3268  6398
[1552]  5941  3370  5739  1532  4633  2309  4009  1975   581  6913  5215
[1563]  8580  7703   431  8926  7292  2002  6762  7413  1551  7505  4969
[1574]  9008  7692  5451  1964  4057  3423   768  6619  2426  5578  6982
[1585]  1875  8396  8542  9690  4990  3303  9884    71   365  2057   684
[1596]  3051  4144  3906     3  8663  9628  6583   867  1612  5332   420
[1607]  1141  2668  8876  3210  7713  1189   558  9910  8403  1757  5420
[1618]  8297  3084  7850  5926  9180  9793   958  3411  9534  4622  6029
[1629]  4845  6051  3419  8328  1294  7476  7500   269  2798  1497  5965
[1640]  2101  9125  1028  5007  6180  7888   464  4256   561    48  2073
[1651]  8190  3156  7554  8863   180  4716   747  1477  9147  2123  7696
[1662]  7660  3567  4507  2707  5536  9645  9826  5620  1397  4084  4336
[1673]  1382  1969  4837  6943   418  6073  9723  5565  1689  3462  3922
[1684]  9213  5475  3778  5098  4029  5429  6592  6301  7286  7930  7035
[1695]  4655  8010  9740  5721  1226  5554  5700  5282  2055  5473  4800
[1706]  4554  8357  3418  3247  5266  2291  9920  9733  8904  1999  1261
[1717]  9345  8339  5476  6195  7710  8352   583  3537  6558  5438  7917
[1728]  8114  2709  7076  1899  1922  8372   974   570  3331  6405  2715
[1739]  5988  4431  7893   358  1388  4489  4134   526  4589  9933  8649
[1750]  2644  4171  4816  2594  7373  9843  4440  3902  4784  1774  3656
[1761]  2612  4651  4461  6216  6426  2378  3270  9490  4122  4467  9012
[1772]  3409  1000  7215  3517  5392  5474  1771  1976  4411  8987  6582
[1783]  3896  7816  8402   451  5624  3853  7337  3925  7203  4748  8982
[1794]  9889  4225  8948   616  9295  2920  7665  4493  9284  2915  1037
[1805]  8529  2874  3311  4228  4920  6370  9753   911  7341  5047  1080
[1816]  3413  7541  9586  4643  4630   951   470  3298   991  3458  2386
[1827]  2490   569  2950  6305  7881  9625  6952  8732  5302  3394  8960
[1838]  2331  1047   809   948  4392  9562  6288  1713  2946  9322  4479
[1849]  9907  1415  5329  2001  5151  1336  4232  6685  5763  5655  1902
[1860]  7870  2186  7120  5346  5033  1021  3170  7859  8463  9481  1402
[1871]  2196  6485  9060  2936  4949  5391  9864  4881  1221  7119  1429
[1882]  1260  3885   967  8093  5814   376  2313  2658  8735  7275  5321
[1893]  6822  1520  8520  3506  9050  7267  6468  8453  5356  9219  4532
[1904]  6358  9277  1287  4504  5337   757  4732  7853   265  9102  8901
[1915]  5255  9306  1233  1066  1088  1659  1183  6349  3261  4204  8268
[1926]  7803  4715  6295   743  5507  5508  8613  1628  5575  4267  8835
[1937]  6614  3200  9919  7110  8235  6037  9545  5458  1464  2748  2194
[1948]  7657  5614  8699  3650  7334  7220   205  4904  5113  8907  4722
[1959]  3836  2609  7016  9131   225  7780  3535  6337  3454  9262  1985
[1970]  2971  1954  1869  9035  8165  9056  7079   473  8313  1544   735
[1981]  7934  1240  1668  5924  1363  5690  1147  9482  2489  4721  1843
[1992]  1342  9927  2881  5490  6712  6990  6481  4638   244  8323  2598
[2003]  9770  4425   129  7858  3577  9727  3624  6871  7434  8427  1499
[2014]  9117  3846  5010  1273  6119  1111  9767  1461  7284   425  7760
[2025]  2807  4156  2026  8491  4365  1881  7997  7305  8564  3715  4720
[2036]  7734  6361  9091  5726  6104  5492  1390  8494  7507  3316  9106
[2047]  7221  6197  4458  9950  2902  1552   680  8763  3996  9840  6060
[2058]  3348   698  4921   577  8669  5806  3149  5168  6096  7417  2184
[2069]  7642  9633  9416  8032  9269  4168  4061  1945  2263  7128  1344
[2080]  7485  4785  4742  1877  5196  1298   623  3391  5978   149  2891
[2091]  8241  2275   596  7468  5261  6576  7359  6019  2200  1858  1841
[2102]  8601  3433  6322  6012  4032  5162  2259  6353  8251  1579  5180
[2113]  9978  5802  9128  8656  6568  7067  2174  4018  8770  6292  2625
[2124]  7339  9516  1235  7510  6209  1259  2617  1806  5247  7616  7157
[2135]  3953  2851  7527  6454  5053   455  6554  7626  5913  3555  1330
[2146]   977  4292  4025  7108  9378  3373  6112  4265  9626  8136  9145
[2157]  4092  1252  9065  2136  2879  5742  7598  1430   286  8718  4187
[2168]  8713  1815  5670  7585  7491  5779  2895  5295  1343  1564  7214
[2179]  9790  7486  3457  9383  8563  1374  5376  7873  2523  1936  8424
[2190]  1358  5933  3252  7810   466  1997  1984  4219  5883  1383  6085
[2201]  5032  4068  7691  1194  3909  7600   935  6973  3456  9818  8140
[2212]    87  3241  5541  8894   726  3779  1149  6950   758  6906  2802
[2223]  4859  8324  6041  4213  9805  6332  2829  2772  2678  1845  6040
[2234]  8371  3522  6296  2098  3963  2695   839  4842  2557  9434  4671
[2245]  4885   511  5120  4993  9058  4529   409  7702  5675  7405  5221
[2256]  4734  4593  3509   777  5787  7481  6077  6036  9255  8806  3318
[2267]  9617  7604  8933  3512  1393  3524  2740  7587  1619  7314  7791
[2278]  1190  3887  1029  5852  3091  7543  7688  6612  1496  7186  7365
[2289]  1937  3863  8558  2193   440  3402  8949  9875  8832  2841  7606
[2300]  1707  6734  4942  9836   454  3045  9796  4148  1040  5500  8120
[2311]  9473  2356  7992  7815   148  4403  7649  2614  7002  9418  6826
[2322]  9904  1521  4073  3266  7877  1986   177  6923  2288  9379  3687
[2333]   214  2852  9789  7545  3553  4452  5680  7234  2570  1675   864
[2344]  9615   515  2425  1631  6517  2476  2398  8155  9151  9347  6262
[2355]  8464  2328  1773  4138  9638  9579   941  4807  9975  7089  7458
[2366]  5333  6879  1670  2629  1159  3153  7751  7245  8635  3357  4424
[2377]  4414  4916  5439  6687  7265  3188  8514  1852  6064  7008  5906
[2388]  4731  1855   591  2393  7736  5570  7960  3702  4327    43  3844
[2399]  6850  2849  9941  9143  5746  9301  7397  8673  2355  5005  7868
[2410]  2414  7445  2534  1300  9081  9682  2857  9945  2928  2501  6406
[2421]  1186  1392  7953  8912  4508  3137  6421  3239   544  5097  3499
[2432]   126  2327  9522   483  8621  8650   921  1169   192   652  6997
[2443]  3220  9966  9218  3562  5768   796  2146  1057  4762  6874  7808
[2454]   589  4840  8808  3855  3201   480  1223  5274   280  9007  9769
[2465]  3288  3202  9512  1972  2110  3817  6103  4149  4038  7050  3490
[2476]  2567  7361   302  7724  7581  5397  6346  2395  9291  3217  8425
[2487]  4849  4897  1491  5520  5265   492  9960  2394  4804   888  9139
[2498]  3592  3291  1863  2691  1828  1788  5809  5509  4322  2340  1113
[2509]  7501   367  6832  6298  4771  8875  7388  9800  3697  5263  9185
[2520]  4634  3701  6634  9559  2761  6476  2906  2636  4343  1980  8560
[2531]  1164  7802  5334  4460  4160  3232  6768  8020  3805  1446  3765
[2542]  3866  9694  6689  4137  3346  9520  6194  5238  4272   975  3426
[2553]     6  8270  4839  6438   555  4968   413  2989  5948  8572  7086
[2564]  8078  9087  8280  4396  5335  1760  4359  5241  7426  7362  5999
[2575]  7633  1462  4740  1042  2223  1110  8914  7987  5417  4178  1155
[2586]  1409  4625  7832  5503  3328  8002  6004  2180  3216  4465  7000
[2597]   504  6368  7961  2553  3760  8276  2333  6823  7762  7589  1258
[2608]  3482  4770  8000  2799  7355  5782  5581  8678  8886  4666  5099
[2619]  8585  1157  2325  6509  5911  8008  1848  1372  6964  1216  8642
[2630]  3621  3468  9425  3195  3187  4201  4781  4787  3618  1830  7225
[2641]  1926  5878  8473  8600  7451  8631  7529  6726  7367  9663    26
[2652]  9721  8420  7566  9870  1932  4665  5550    25  4714  2578  5442
[2663]  9046  2674  1509  3688  5469  7879  2493  8336  4954   202  1632
[2674]  5786  5232  7289  6510  2487  7349   873  8481  1804  9292  6024
[2685]   374  2781  8947  6084  9027  7363  8029  5404  5937  3966  5828
[2696]  9357  7187  1679  2007  2310  2755  9353  5908   751  8238  8500
[2707]  3460  7005  8752  6165  9431  2231   660  7758   486   943  8149
[2718]  6204  4457  6003  3833  1158  2965  1126   778  1350  7864  1407
[2729]  4056  5717  4360  3296  8672  2033  9940  1540  6501  7538  6525
[2740]   655  5552  2862  2652  9136  8509  5372   417   551  4641  2269
[2751]  7453  9869  4659  8833  2217  9714  6270  3739  5464  1981  2981
[2762]  2660   439  6442  7622  4565  6397  8332  8855  2060   649  4801
[2773]  3070  4557  6743  3871  5206  5304  6437  6902  2710  3511  8852
[2784]  3006  7268  4598  9491  1036  6541   631  7733  2229  5590  6855
[2795]  4995   659  1288  1201  1212  5549   637  8584   315  6284  3949
[2806]  6221  4790  5715  7408  5935  3904  4767  9833  8777  5234  7330
[2817]  3941  2411  4152  5259  4059  4501  6238  3917  8988  9096  1184
[2828]   169   804  7951  2780  7831  2647  1414  6240  4502  9386  2813
[2839]  3581  4062  3615  4447  3207  2167  8877  8358   103  7022  9270
[2850]   938  1011   764  2358  4065  1320  2760  7056  2420  5872  7698
[2861]  2580  8715  5367  8128  2260  7322  7482   164  7435  6935  2222
[2872]  5419  2022  8825  5659  4145  6725  4069  9043  1797  6696  8482
[2883]  8014  8561  1214  1868  7668  1908  6461  5684  9468  9267  7190
[2894]  3521  5393  2251  7632  9344  4763  2387  1115  5370  7886  3851
[2905]  4733  2821  4827  9388  6577  5123  6126  7811  4677  6124  3011
[2916]  4486  9552  7954  4229  8034  9052  5296  9015  4817  4252  8957
[2927]  9898  1591  2054  6998  9051  5939   330  5902  9409  8913  1600
[2938]  9699  6234  7021  5040  8966  5324  4090  3886  8899  1386  6821
[2949]  1027  2878  8991  9599  8531  3764  4230  6286  8025  9773  8273
[2960]  9695  2121  7741  9393  3016  6086  1026  6965  9752  4207  1142
[2971]  9820  4699  3114  2763  1281   772  7477  4446  4183  4125  4383
[2982]   609  1280  1763   833  9937  7594   174   992  2771  8202  6566
[2993]  1560  4443  4987   728  3721  5041  7103  8157  4898  2272  5877
[3004]  7623  9585  9693  1704  9074  1653  4892  3212  7424  4082  8909
[3015]  6628  2651  4195  4578   134  8195   603  7006  1458  5190  5560
[3026]  1927  2600  4675  3899  3412  1886  3970  6653    85  8232  5192
[3037]  7723  5653  1161  2721   769  3709  2701  5371  7138    49  9115
[3048]  1989 10000  7963  1474  6627  4039  9942  6652  3644  7121  1368
[3059]  6191  9891  5896  2932  8254  5623  3518  2918  3775  8921  2693
[3070]  3950  9227  2453  3525  8815  1781  9804  8599  7558  6202  2828
[3081]  4696  9455  8817    99  8670  5985  4363  3073  5028  4296  3770
[3092]  7563  5271  3154  4826  4654  7872  2347   946  2150    45  6663
[3103]   592  7448  8435   791  5325  1860    34  5253  4463  4915  8269
[3114]  6172  7111  2730  4917   284   826  3172  8058  1808  1475  4513
[3125]  8304  9667  5172  5297  1245  7840  4667  6594  9032  8840   199
[3136]  1492  5313  9429  5572  1143  6431  8937  3267  5288  6944  3558
[3147]  9141   401  1880  4259  6220  8565  3561  4401  1819  1595  4697
[3158]  2496  5191  5462  7124  4251  8264  3828  8804  4514  4597  8703
[3169]  5258   579  8406  7149   802  7611  5496  8421  7004  8677  7029
[3180]  1087  7825  2649  1890  6181  3029  8518  7916  3973  9511  6556
[3191]  8555  2236   468  4891  2273  1952  9312  4940  2454  7561  4384
[3202]  9981  5636   267  6247  9711  2391  6698  3783  4627  2048  6018
[3213]  7438  5858  1487  2933  9991  7921  9634  8026  4576  1269  2776
[3224]  2697  8387  9392  7912  1285  2116  2712  6092  3244  8728  3196
[3235]  1517  9181  7258   435  6686  9304  3634  4998   485   618  3173
[3246]   268  7874  5046  2371  3692  1979  5178  4074    29   124  3669
[3257]    55  2108  5292  1253  6909  8271  3543  1983  5704  4747  1232
[3268]  6118  7774  5029  5270  8300  9048  4087  6994  3750  2052  6470
[3279]  5024  7560  7959  6945  9888  4476  6954  6946  2968  3280  9902
[3290]  6402  9367  8050   385  7255  1531  2207  5705  7857  2436  1081
[3301]  5833  8311  2209   106  5777   962  7440  5566  9569  1854  2076
[3312]  7387  3035   369  1736  5983  2731  2092  9019  3226  6970  9459
[3323]  1093  7224  2809  1104  7401  1512  9895  2887  4231   195   856
[3334]  5928   648  5750  8259  6170  9493  7192  5502  7682  8365  3103
[3345]  5831  2439  7023  6559  1676  8116  6926  6959  3513  7242  3691
[3356]  2909  2562  3375  8308  1453  9576  2673  9776  7151  5531  7378
[3367]  7444  4673   332  6804  9903  9501  5815    21  6477  3625  6635
[3378]  8932  1064  6531  6190   167  5154  6475  1931  2980  4854  5114
[3389]  9596  5672    54  6866  9553  5017  2860   882   406  3958  9203
[3400]  4959  7784  7472  8004  4918  8213  9006  8802  1410  9620  3723
[3411]  1683  8602  3483  5914  5129  7142  6524  5526  9647   976  6164
[3422]  1182  9066  7709  6747  7903  1876  6067  2344   559  5347  8069
[3433]  1313  2632  5160  1635  1524  1669  2431  7570  6338  1584  2161
[3444]  7615   151  2067    92  4844  8288   441  3926   922  9989  4196
[3455]  7398  6530  6147  1567  9263  7778  6539  1354  4562  7993  2815
[3466]  1151  6870  1433  5738  7836  7414  1220  4301  8908  2224  2618
[3477]  9750  3927  4406  1012  8398  9310  9641  1310  7905  5791  9824
[3488]  7609   838  5086  9471  3093  7075  9057  2939  4298  6589  5280
[3499]  4976  1742  2124   908  6584  8067  6448   474  5752  6116  2178
[3510]   293  4499  4294  3136  6283   966  3716  1709  8551   411  5903
[3521]  4317  4616  5587  2205  4980  3794  9802  2795  6811  1720  8231
[3532]  3023  9361  2388  8391  7161  4172  9506  8151  5104  8154  7179
[3543]  2475  2339  2082  9097   636  8316  3336   288  4509  5938  5949
[3554]  1796  4053  1601   753  6890  2699  8457  5807  4582  9443  2359
[3565]  2143  9294  1304  5470  5229   197  5725  3367  1207  9166  1817
[3576]  6787  8399  1106  3437  5447  8723  5795  9231  4021  7513  2507
[3587]  4329  2000  6143   512  6567  2135  9210   858  5054  4130   362
[3598]  3347  6127  1688  2792  9965  1128   745  3938  2012  1947  1437
[3609]   248  1004  4793  3304  8623    79  5228  6057  1798  2885  9286
[3620]  5663  9926  4466  7685  9768  4573  6366  9700   535  4284  8547
[3631]  7899  9188   818  5535  3004  9289  6738  3878  9339  6469  3501
[3642]  6130  3366  9179  5790  9949  2750  7431  5082  2449  7927  5131
[3653]   956  6449  5860  2720  9968  7662  8860   658  1772  1510  7534
[3664]   690  8471  9665  9863  9041  7875  1685  3502  5781  3285  4037
[3675]  3417  2056   351  9217  4944  6345  2814  7172  8094  2294  7324
[3686]  3224  1705   736  1629  9595  7425  8209  7677  3338  2408  3726
[3697]  6171  4711  2590  7087  3059  5853  6192  1626  4516  3929  8709
[3708]   773  7503  5128  9088  1800  1185  9581  5571  7154  3182  6440
[3719]  2581  6876  9248  5240  9918  2029  9844  7281  9657  5092  9191
[3730]  3111  8022  8508  1661  3845  5359  4570  4695  8168  8044  6507
[3741]   328  2080  6960  3118  1993  4433  6760  5656  8871  3223  6347
[3752]  9668  3379  6733  1099   132  3752  4224  2125  4629   273  7479
[3763]   465  4603  9390  4825  1655  3105   108  8589  5804  4453   153
[3774]  6798  3021  2081  3075  1557  7094  4847   996  7502  6372  1206
[3785]  5165  4549  2867  4221  5225  7878  7645  3404   945  2994  1866
[3796]     8  4331  6897  9030  1907   765   711  2592   150  2775  7277
[3807]  6009  1871   424  3138  9062  5064  1694  5628  2976  2028  6661
[3818]   957  3054  7329  6730  7667  1070  9873  2917   414   212  5900
[3829]  2085  2031  3545   296  6336  1469  2342  2462   608  6761  2554
[3840]  8990  2962  9186  9063   524  1146  4060   391  5022  5450  3985
[3851]  1602  3954  6335  9200  2172  2749  8795   308  7823  6740  1657
[3862]  9622  8935  6106  2404  2924    47  2050   998  5899   672  1445
[3873]  8197  6162  8153  4342   755  7100  8753   220  4495  1188  1609
[3884]  1413  4510  3661  2306  4902  2016  5009  8830  8648  6342  3937
[3895]  4320  7064  9928  8607  2869   903  9192   428  3228  3432  7726
[3906]  6264  3847  1977   924  2008  6907  1537    63  9887  1324  8187
[3917]  2762  8597  8178   503  1507   194  6384   844  2794  7063   762
[3928]  4632  8086  1896  5457  3027  5954   236  8455  2955  8823  8303
[3939]  1229  7158   224    95  8423  5703  8759  7441  2188  8854  1483
[3950]  6674  3916   696  1442   928  2491  9061   617  9477  4449  4710
[3961]  8470   191  2234  1366  2023  3533  4791  8775  5499  7704  1746
[3972]  5306  4503  5100  2935  1518  9197  3964   287  5277  5990  9079
[3983]  1941  1338  3039  6090  6578  5753  5892  8605  4927  4689  9223
[3994]  4569  7001  2657  4744  1314  2226   243  6513   788  4113  9784
[4005]  8409  4843   505  6151  4746  9408  7504  4103  6991  7612  8652
[4016]  6371  5771  5544  6500  7999  7027  2389  3022  8362  7771  6460
[4027]  7423  9119  4369  7884  9649  9026  5209  9448  2235  7095  8924
[4038]   493  2897  2574  8097  6754  5942  7447  7384   539  6748  4325
[4049]   235  3176  6047  3121  5201  9885  8771  9274  8184  3809  9109
[4060]  4310  7207  7206  8073  1116  1912  3984  1738  7885  6704  5650
[4071]  7376  2170  8220  8536  7636  7197  8277  4035  9086  7727  3945
[4082]  1599   298  9037   969  1726  7210  9846  1494   703  1776  8922
[4093]  1502   295  9331  3236   724  5471  3952  5766  7018  6373  3047
[4104]  8760  7011  5460  8545  1697  4216  7742  6601  8793  5239  4701
[4115]  8113  2348   437  8606  6933  6168  3860  9601  2817  4894  3430
[4126]   953  3822  6745  8507  3340  3145  8125   491   513  3710  5532
[4137]  3541   781   450  5193  7638  5927  8765  5643  6395  7078  8541
[4148]   335  5062  2670  4922  1328  5648  9299  5312  2643  9450  7705
[4159]   613  1198  9675  9438  3530  5305  8356  6676  3924  3893  5195
[4170]  6419  8782  8174  7266  3559   209  4237  6862  6966   895   307
[4181]  9002  7522  7918   987  7189  8461  8519  7368   634  3254  4398
[4192]  8896  4604  9913  8954  6626  1014  4926  1538  2998  2402  3119
[4203]  6841  7967  6215  5244  1208  2265  3519  4405  3042  6737  9823
[4214]  5964  8460  8985  6017  6882  3867  2140  2481  2711  7989  3816
[4225]  6049  5299  5063  7073  5002  3854  5758  1123  9751  1504  1594
[4236]   372  2778  9567  5352  8766  4007  2419  7340  7519  6808  4091
[4247]  5527  5657  4154  2015  2410  6714  4299  7942  8243  2199  5159
[4258]  7474  2603  2127  1265  9801  6542  6450  7553  5631  9880  1814
[4269]  3326  1728  9551  6472  2901  1640  8096  8654  6546  6632   597
[4280]  9140  7253  1753  8594  3944  8836    69  4933  6075  4579  3243
[4291]  3563  1598  4274  6390  4561  4483  3104  4978  5747  1664  6315
[4302]  9664  2053  3696  1750  3000  4158  4919  7134  6528  8880   917
[4313]  1215  3942  9098  2369  9376  7697  6242   517   988  5279  7821
[4324]  7826  8218  6053  5341  7945  6872   982  8486  4726  1165  6707
[4335]  1925  2451   913  9492  6324  3713  4500  1309  1592  8170  8740
[4346]  1340  6452  5115   104  7621  9238  4146  3351  4416  4545  4033
[4357]  5055   317  8625  4886  3507  5973  8207  5622  9876  9957  5920
[4368]   697   436    60  5829  1533  3041  4672  6710  4615   799  1335
[4379]  6046  3975  2457    36  7765  1572  3633  4031   216  4764   771
[4390]  8622  6042  4862  1405  5651  8434  9168  7297  6013  5611  7646
[4401]  4268  2847  8205  5591  6074  9837  2102  9771  8569  3995  6185
[4412]  6407  1097  7973  5365  4245   876  4588  4547  6938  3801  5688
[4423]  5021   815   719  2117  1939  9713  9806  1053  2752  7216   963
[4434]  3704  5732  2669  5125  2452  6473   163  9440  8037   300  7357
[4445]  2952  3474  1721  8997  6499  7619  8837  8230  3690  3654  7028
[4456]  6942   240  6894  5605  4965  8633  3635  8574  2145  9194  4135
[4467]  5664  2437  5207  5709  5861  7201  7876  4200  3110  6797  7449
[4478]  6388  3133  9912   171  1695  9706  4151   371  4824   166  9814
[4489]   550   556  9683  6665  3790   325   819  1935  8620  4283  2504
[4500]  4939  7404  8111  7891  5118  1121   875  1548  5398  5426  1481
[4511]  3839  9513  4936  7185  7169  1894  7009  1645  8841  6381  7935
[4522]  8844  6078  3869  1213  3174  8774  5049  1853  5382  1867  7939
[4533]  1795     7   482  4822  8984  7494  1938  9759  1489  1891  8544
[4544]  5996  5173   452  8018   246  7925  9264  5147  5666  7150  3784
[4555]  6135  5982  5423  6393  7406  4971  6716  9917  2129  4128   720
[4566]  4236  8936  7602  2510  4121  6848  9403  4429  3751  4820  3299
[4577]   207   346  5827  9858  5584  3101  3673  6052  9404  7670  6562
[4588]  1857  9958  9993  6918  9107  8516  2271  8301  8942  9358  1284
[4599]  9430  4575  7654  2992  6901  2845  1005  7143  2806  6380  5986
[4610]  4519  6609  7295  9707  4001   710  7147  9338  3498  7358   361
[4621]  7768  5149    58  2202  1885  4660  1465  8016  6782  7855  2551
[4632]   714  3102  2566  3889  1068  9808  7663  1172  3250   565  3560
[4643]  3528   599  6828  7315  4141  3162  5759  5318  9373  3489  4023
[4654]  7749  5744  1396  3606  8051  3588  6679  2078  3664  3734  7731
[4665]  1135  2827  1642  3333  4745  6916  7867  4439  6455  9247  8845
[4676]  3060  3090  3766  8236  2445  9659  3503  8681  5873  9370  8762
[4687]  2713  2133  9544  8185  9240  1315  6241  5639  8080  9208  4487
[4698]  5737  4044  6491   622  6189   563  9990  2197   327  2525  1539
[4709]  1224   366   343  8943  1625  7941  1139  4943  4319  6082  6995
[4720]  4798   738  2198  4580  7792  8619  9484  9385  4003   713  1353
[4731]  1197  1250  1610  7191  4684  8798  3431  2875  7994  3147  2640
[4742]  9349  5511  5869  7744   114  5702   877  7198  9237  4766  1701
[4753]  9939  5493  2316  9234  5176  2177  7981  1597  2583  1332  1435
[4764]  2768  3214  3746  3641  8805  2017  6503  4550  9972  5448  7040
[4775]  7135  5943  6274  4409  4818  1075   496  3355  2330  6351  3424
[4786]  4587  4380  8395  7787  1454  1051  9152  2069  6638   204  8821
[4797]  4244  9278  8586  7820  3124  1218  2025  2341  5203  2912  3491
[4808]  2367  1202  3481  9389  3741  3742  6875  1754  4618  1316  8368
[4819]  9597  5506  2527  4114   905  3998  9054  3180  3678  1058  4530
[4830]  6281  5634  3325  3649  9495  8603  3415  8498  3068  2266     5
[4841]  6250  3169  6226  7634  3126  5436  9612  1377  7880  7686  3912
[4852]  1978  5957  2784  4975   342  6947  2934  6231  3317  3827  3720
[4863]  1365  6969  4786  9474  9530  6765  8439  9999  3026  6526  1022
[4874]  9346  9563  9257  2195  1308  3164  7402  9411  3484  3314  9719
[4885]  9298   227  6308  5794  7036  2321  9135  9953  8862  4209  9855
[4896]  6244  8812  7025  8246  9316  5637  5083  6904  5606  1581  3680
[4907]  3957  8522  2376  9725  8889  7544  1389  2122   786  9709  6343
[4918]  8266  5805   394  7841  4352  3281  4572  3504  3804  8196  5638
[4929]  2957   984  2601  5582  9055  3666  1587  4428  7661  9407  9406
[4940]  5963  6279  3888  6691  2997   397  7844  6401  2747  8459  6030
[4951]  5959  5410  6776  3768  5632  9819  6699  3108  5220  9447  5931
[4962]  8272  7069  3319  3629  5891  3695  2392  8993  5593  5946  4594
[4973]  4262  1117  5161  7345  2030   102   571  3342  5182  7012  7419
[4984]  8354  7074  4815  4750  2692  8530  1362  1960    11  1417   231
[4995]  5395  8307  9324  4379  7829  8199
> size(train)
Error in size(train) : could not find function "size"
> dim(train)
NULL
> length(train)
[1] 5000
> fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
> dim(data[train,])
[1] 5000    4
> dim(data[-train,])
[1] 5000    4
> fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
> glm.pred = ifelse(fit.prob > .5, "Up", "Down")
> t = table(glm.pred, data[-train,]$default)
Error in table(glm.pred, data[-train, ]$default) : 
  all arguments must have the same length
> size(glm.pred)
Error in size(glm.pred) : could not find function "size"
> dim(glm.pred)
NULL
> length(glm.pred)
[1] 10000
> dim(data[-train,]$default)
NULL
> length(data[-train,]$default)
[1] 5000
> length(fit.prob)
[1] 10000
> glm.fit = glm(data$default~data$income+data$balance, data[train,], family="binomial")
> fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
Warning message:
'newdata' had 5000 rows but variables found have 10000 rows 
> glm.fit = glm(default~income+balance, data, family="binomial", subset=train)
> fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
> glm.pred = ifelse(fit.prob > .5, "Up", "Down")
> t = table(glm.pred, data[-train,]$default)
> missclassified = t[1,2] + t[2,1]
> (missclassified / sum(t))
[1] 0.0246
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1]/2)
+     glm.fit = glm(default~income+balance, data, family="binomial", subset=train)
+     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
+     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
+     t = table(glm.pred, data[-train,]$default)
+     missclassified = t[1,2] + t[2,1]
+     (missclassified / sum(t))
+ }
> validationerror(Default)
[1] 0.0266
> validationerror(Default)
[1] 0.0246
> validationerror(Default)
[1] 0.0246
> validationerror(Default)
[1] 0.0276
> validationerror(Default)
[1] 0.0264
> validationerror(Default)
[1] 0.026
> validationerror(Default)
[1] 0.0278
> set.seed(1)
> validationerror(Default)
[1] 0.0286
> set.seed(2)
> validationerror(Default)
[1] 0.0276
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1]/2)
+     glm.fit = glm(default~income+balance, data, family="binomial", subset=train)
+     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
+     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
+     t = table(glm.pred, data[-train,]$default)
+     missclassified = t[1,2] + t[2,1]
+     (missclassified / sum(t))
+ }
> set.seed(1)
> validationerror(Default)
[1] 0.0286
> validationerror(Default)
[1] 0.0236
> validationerror(Default)
[1] 0.028
> validationerror(Default)
[1] 0.0268
> newDefault = Default
> newDefault$student = ifelse(newDefault$student == "Yes", 1, 0)
> View(newDefault)
> validationerror = function(data) {
+     train = sample(dim(data)[1], dim(data)[1]/2)
+     glm.fit = glm(default~income+balance+student, data, family="binomial", subset=train)
+     fit.prob = predict(glm.fit, type="response", newdata=data[-train,])
+     glm.pred = ifelse(fit.prob > .5, "Up", "Down")
+     t = table(glm.pred, data[-train,]$default)
+     missclassified = t[1,2] + t[2,1]
+     (missclassified / sum(t))
+ }
> validationerror(newDefault)
[1] 0.0282
> validationerror(newDefault)
[1] 0.0282
